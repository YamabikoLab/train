#!/usr/bin/env bash

if ! [ -x "$(command -v docker-compose)" ]; then
    shopt -s 
    alias docker-compose='docker compose'
fi

UNAMEOUT="$(uname -s)"

WHITE='\033[1;37m'
NC='\033[0m'

# Verify operating system is supported...
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. train supports macOS, Linux, and Windows (WSL2)." >&2

    exit 1
fi

# Source the ".env" file so Laravel's environment variables are available...
if [ -f ./.env ]; then
    source ./.env
fi

# Define environment variables...
export APP_PORT=${APP_PORT:-80}
export APP_SERVICE=${APP_SERVICE:-"rails.test"}
export DB_PORT=${DB_PORT:-3306}
export WWWUSER=${WWWUSER:-$UID}
export WWWGROUP=${WWWGROUP:-$(id -g)}

# Function that outputs train is not running...
function train_is_not_running {
    echo -e "${WHITE}Train is not running.${NC}" >&2
    echo "" >&2
    echo -e "${WHITE}You may train using the following commands:${NC} './bin/train up' or './bin/train up -d'" >&2

    exit 1
}

function rails_new {
    docker build \
        -f train/runtimes/rails/Dockerfile \
        -t rails . \
        -o . \
        --build-arg DOCKER_BUILDKIT=1 \
        --build-arg APP_NAME=$1 \
        --progress plain \
        --no-cache
}

if [ -z "$TRAIN_SKIP_CHECKS" ]; then
    # Ensure that Docker is running...
    if ! docker info > /dev/null 2>&1; then
        echo -e "${WHITE}Docker is not running.${NC}" >&2

        exit 1
    fi

    # Determine if train is currently up...
    PSRESULT="$(docker-compose ps -q)"
    if docker-compose ps | grep $APP_SERVICE | grep 'Exit'; then
        echo -e "${WHITE}Shutting down old train processes...${NC}" >&2

        docker-compose down > /dev/null 2>&1

        EXEC="no"
    elif [ -n "$PSRESULT" ]; then
        EXEC="yes"
    else
        EXEC="no"
    fi
else
    EXEC="yes"
fi

if [ $# -gt 0 ]; then
 
    # Proxy Node commands to the "node" binary on the application container...
    if [ "$1" == "node" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u train \
                "$APP_SERVICE" \
                node "$@"
        else
            train_is_not_running
        fi

    # Proxy NPM commands to the "npm" binary on the application container...
    elif [ "$1" == "npm" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u train \
                "$APP_SERVICE" \
                npm "$@"
        else
            train_is_not_running
        fi

    # Proxy NPX commands to the "npx" binary on the application container...
    elif [ "$1" == "npx" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u train \
                "$APP_SERVICE" \
                npx "$@"
        else
            train_is_not_running
        fi

    # Proxy YARN commands to the "yarn" binary on the application container...
    elif [ "$1" == "yarn" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u train \
                "$APP_SERVICE" \
                yarn "$@"
        else
            train_is_not_running
        fi
    # Proxy ruby commands to the "ruby" binary on the application container...
    elif [ "$1" == "ruby" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u train \
                "$APP_SERVICE" \
                ruby "$@"
        else
            train_is_not_running
        fi
    # Proxy rails commands to the "rails" binary on the application container...
    elif [ "$1" == "rails" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u train \
                "$APP_SERVICE" \
                rails "$@"
        else
            train_is_not_running
        fi
    # Proxy gem commands to the "gem" binary on the application container...
    elif [ "$1" == "gem" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u train \
                "$APP_SERVICE" \
                gem "$@"
        else
            train_is_not_running
        fi
    # Proxy erb commands to the "erb" binary on the application container...
    elif [ "$1" == "erb" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u train \
                "$APP_SERVICE" \
                erb "$@"
        else
            train_is_not_running
        fi
    # Proxy irb commands to the "irb" binary on the application container...
    elif [ "$1" == "irb" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u train \
                "$APP_SERVICE" \
                irb "$@"
        else
            train_is_not_running
        fi
    # Proxy rake commands to the "rake" binary on the application container...
    elif [ "$1" == "rake" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u train \
                "$APP_SERVICE" \
                rake "$@"
        else
            train_is_not_running
        fi
    # Proxy rdoc commands to the "rdoc" binary on the application container...
    elif [ "$1" == "rdoc" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u train \
                "$APP_SERVICE" \
                rdoc "$@"
        else
            train_is_not_running
        fi
    # Proxy ri commands to the "ri" binary on the application container...
    elif [ "$1" == "ri" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u train \
                "$APP_SERVICE" \
                ri "$@"
        else
            train_is_not_running
        fi
    # Proxy bundle commands to the "bundle" binary on the application container...
    elif [ "$1" == "bundle" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u train \
                "$APP_SERVICE" \
                bundle "$@"
        else
            train_is_not_running
        fi
    # Proxy rbenv commands to the "rbenv" binary on the application container...
    elif [ "$1" == "rbenv" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u train \
                "$APP_SERVICE" \
                rbenv "$@"
        else
            train_is_not_running
        fi
    # Initiate a MySQL CLI terminal session within the "mysql" container...
    elif [ "$1" == "mysql" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                mysql \
                bash -c 'MYSQL_PWD=${MYSQL_PASSWORD} mysql -u ${MYSQL_USER} ${MYSQL_DATABASE}'
        else
            train_is_not_running
        fi

    # Initiate a MySQL CLI terminal session within the "mariadb" container...
    elif [ "$1" == "mariadb" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                mariadb \
                bash -c 'MYSQL_PWD=${MYSQL_PASSWORD} mysql -u ${MYSQL_USER} ${MYSQL_DATABASE}'
        else
            train_is_not_running
        fi

    # Initiate a PostgreSQL CLI terminal session within the "pgsql" container...
    elif [ "$1" == "psql" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                 pgsql \
                 bash -c 'PGPASSWORD=${PGPASSWORD} psql -U ${POSTGRES_USER} ${POSTGRES_DB}'
        else
            train_is_not_running
        fi

    # Initiate a Bash shell within the application container...
    elif [ "$1" == "shell" ] || [ "$1" == "bash" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u train \
                "$APP_SERVICE" \
                bash "$@"
        else
            train_is_not_running
        fi

    # Initiate a root user Bash shell within the application container...
    elif [ "$1" == "root-shell" ] ; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                --user root \
                "$APP_SERVICE" \
                bash "$@"
        else
            train_is_not_running
        fi

    # Initiate a Redis CLI terminal session within the "redis" container...
    elif [ "$1" == "redis" ] ; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                redis \
                redis-cli
        else
            train_is_not_running
        fi

    elif [ "$1" == "init" ]; then
        DOCKER_BUILDKIT=1 docker build \
        -f train/runtimes/app/Dockerfile \
        -t train/app . \
        --build-arg TIME_ZONE=${TIME_ZONE} \
        --build-arg WWWUSER=${WWWUSER} \
        --build-arg WWWGROUP=${WWWGROUP} \
        --build-arg RUBY_VERSION=${RUBY_VERSION} \
        --force-rm=true \
        --no-cache
        shift 1
        if [ $# -eq 1 ]; then
            rails_new $1
        fi
    
    elif [ "$1" == "new" ]; then
        shift 1
        if [ $# -eq 1 ]; then
            rails_new $1
        else
            echo -e "${WHITE}train new app_name${NC}" >&2
        fi

    # Pass unknown commands to the "docker-compose" binary...
    else
        docker-compose "$@"
    fi
else
    docker-compose ps
fi
